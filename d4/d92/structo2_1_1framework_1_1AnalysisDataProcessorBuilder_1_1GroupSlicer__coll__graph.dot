digraph "o2::framework::AnalysisDataProcessorBuilder::GroupSlicer&lt; G, A &gt;"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{o2::framework::AnalysisData\lProcessorBuilder::GroupSlicer\l\< G, A \>\n||+ GroupSlicer()\l+ begin()\l+ end()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +max" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{int64_t\n||}",height=0.2,width=0.4,color="grey75"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +mBegin" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{o2::framework::AnalysisData\lProcessorBuilder::GroupSlicer\l\< G, A \>::GroupSlicerIterator\n||+ GroupSlicerIterator()\l+ GroupSlicerIterator()\l+ GroupSlicerIterator()\l+ operator=()\l+ operator=()\l+ getLabelFromType()\l+ GroupSlicerIterator()\l+ hasIndexTo()\l+ isIndexTo()\l+ operator++()\l+ operator==()\l+ operator!=()\l+ groupingElement()\l+ operator*()\l+ associatedTables()\l+ prepareArgument()\l}",height=0.2,width=0.4,color="black",URL="$db/d21/structo2_1_1framework_1_1AnalysisDataProcessorBuilder_1_1GroupSlicer_1_1GroupSlicerIterator.html"];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +selections" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{array\< soa::SelectionVector\l const *, sizeof...(A)\>\n||}",height=0.2,width=0.4,color="grey75"];
  Node5 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +position" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{uint64_t\n||}",height=0.2,width=0.4,color="black",URL="$d6/d30/classuint64__t.html"];
  Node6 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +starts" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{array\< soa::SelectionVector\l::const_iterator, sizeof...(A)\>\n||}",height=0.2,width=0.4,color="grey75"];
  Node7 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +mGroupingElement" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{iterator\n||}",height=0.2,width=0.4,color="grey75"];
  Node8 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +groups" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{array\< std::vector\l\< arrow::compute::Datum\l \>, sizeof...(A)\>\n||}",height=0.2,width=0.4,color="grey75"];
  Node9 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +offsets" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{array\< std::vector\l\< uint64_t \>, sizeof...(A)\>\n||}",height=0.2,width=0.4,color="grey75"];
  Node10 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +mAt" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{tuple\< A... \> *\n||}",height=0.2,width=0.4,color="grey75"];
}
