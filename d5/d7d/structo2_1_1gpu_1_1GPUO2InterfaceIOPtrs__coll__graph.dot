digraph "o2::gpu::GPUO2InterfaceIOPtrs"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{o2::gpu::GPUO2InterfaceIOPtrs\n||}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +o2DigitsMC" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{array\< std::unique\l_ptr\< const o2::dataformats\l::MCTruthContainer\< o2::MCCompLabel\l \> \>, o2::tpc::Constants::MAXSECTOR \> *\n||}",height=0.2,width=0.4,color="grey75"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +outputTracks" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{vector\< o2::tpc::TrackTPC \> *\n||}",height=0.2,width=0.4,color="grey75"];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +outputTracksMCTruth" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{o2::dataformats::MCTruth\lContainer\< o2::MCCompLabel \>\n||+ MCTruthContainer()\l+ MCTruthContainer()\l+ MCTruthContainer()\l+ MCTruthContainer()\l+ ~MCTruthContainer()\l+ operator=()\l+ operator=()\l+ getMCTruthHeader()\l+ getElement()\l+ getIndexedSize()\l+ getNElements()\l+ getLabels()\l+ getLabels()\l+ clear()\l+ addElement()\l+ addElements()\l+ addElements()\l+ addElementRandomAccess()\l+ setFrom()\l+ mergeAtBack()\l+ flatten_to()\l+ restore_from()\l+ print()\l+ inflate()\l+ deflate()\l+ ClassDefNV()\l}",height=0.2,width=0.4,color="black",URL="$dc/daa/classo2_1_1dataformats_1_1MCTruthContainer.html"];
  Node5 -> Node4 [dir="back",color="orange",fontsize="10",style="solid",label=" \< o2::MCCompLabel \>" ,fontname="Helvetica"];
  Node5 [label="{o2::dataformats::MCTruth\lContainer\< TruthElement \>\n||+ MCTruthContainer()\l+ ~MCTruthContainer()\l+ MCTruthContainer()\l+ MCTruthContainer()\l+ MCTruthContainer()\l+ operator=()\l+ operator=()\l+ getMCTruthHeader()\l+ getElement()\l+ getIndexedSize()\l+ getNElements()\l+ getLabels()\l+ getLabels()\l+ clear()\l+ addElement()\l+ addElements()\l+ addElements()\l+ addElementRandomAccess()\l+ setFrom()\l+ mergeAtBack()\l+ flatten_to()\l+ restore_from()\l+ print()\l+ inflate()\l+ deflate()\l+ ClassDefNV()\l}",height=0.2,width=0.4,color="black",URL="$dc/daa/classo2_1_1dataformats_1_1MCTruthContainer.html",tooltip="A container to hold and manage MC truth information/labels. "];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +outputBufferSize" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{size_t\n||}",height=0.2,width=0.4,color="grey75"];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +outputClusRefs" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{vector\< uint32_t \> *\n||}",height=0.2,width=0.4,color="grey75"];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +tpcZS\n+clusters\n+o2Digits\n+compressedClusters" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{const\n||}",height=0.2,width=0.4,color="grey75"];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +outputBuffer" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{void *\n||}",height=0.2,width=0.4,color="grey75"];
}
