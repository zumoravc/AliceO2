digraph "o2::trd::TRDGeometry"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{o2::trd::TRDGeometry\n||+ ~TRDGeometry()\l+ TRDGeometry()\l+ createGeometry()\l+ addAlignableVolumes()\l+ createClusterMatrixArray()\l+ createPadPlaneArray()\l+ rotateBack()\l+ chamberInGeometry()\l+ getSensitiveTRDVolumes()\l+ instance()\l# fillMatrixCache()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{o2::trd::TRDGeometryBase\n|+ st\l+ const\l+ y\l+ z\l+ eps\l+ status\l+ const\l+ stack\l+ const\l+ row\l+ MAXMATRICES\l# mPadPlanes\l# mSMStatus\l# TLENGTH\l# SHEIGHT\l# SWIDTH1\l# SWIDTH2\l# SLENGTH\l# FLENGTH\l# SMPLTT\l# VSPACE\l# HSPACE\l# VROCSM\l# CRAH\l# CDRH\l# CAMH\l# CROH\l# CROW\l# CSVH\l# CH\l# CHSV\l# ANODEPOS\l# CALT\l# CCLST\l# CCLFT\l# CGLT\l# CCUTA\l# CCUTB\l# CAUT\l# CALW\l# CALH\l# CALWMOD\l# CALHMOD\l# CWSW\l# CWSH\l# CPADW\l# RPADW\l# DRTHICK\l# AMTHICK\l# XETHICK\l# WRTHICK\l# RMYTHICK\l# RCBTHICK\l# RGLTHICK\l# RRHTHICK\l# RFBTHICK\l# PPDTHICK\l# PPPTHICK\l# PGLTHICK\l# PCBTHICK\l# PPCTHICK\l# PRBTHICK\l# PELTHICK\l# PHCTHICK\l# DRZPOS\l# AMZPOS\l# WRZPOSA\l# WRZPOSB\l# CALZPOS\l# MCMMAX\l# MCMROW\l# ROBMAXC0\l# ROBMAXC1\l# ADCMAX\l# TBMAX\l# PADMAX\l# COLMAX\l# ROWMAXC0\l# ROWMAXC1\l# TIME0BASE\l# TIME0\l# XTRDBEG\l# XTRDEND\l# CWIDTH\l# CLENGTH\l|+ ~TRDGeometryBase()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ getSector()\l+ getTime0()\l+ getXtrdBeg()\l+ getXtrdEnd()\l+ getChamberWidth()\l+ getChamberLength()\l+ getAlpha()\l+ cheight()\l+ cheightSV()\l+ cspace()\l+ craHght()\l+ cdrHght()\l+ camHght()\l+ croHght()\l+ csvHght()\l+ croWid()\l+ anodePos()\l+ myThick()\l+ drThick()\l+ amThick()\l+ drZpos()\l+ rpadW()\l+ cpadW()\l+ cwidcha()\l+ MCMmax()\l+ MCMrow()\l+ ROBmaxC0()\l+ ROBmaxC1()\l+ ADCmax()\l+ TBmax()\l+ padmax()\l+ colmax()\l+ rowmaxC0()\l+ rowmaxC1()\l# TRDGeometryBase()\l# ClassDefNV()\l}",height=0.2,width=0.4,color="black",URL="$d6/dbe/classo2_1_1trd_1_1TRDGeometryBase.html"];
  Node2 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{o2::detectors::DetMatrix\lCacheIndirect\n||+ DetMatrixCacheIndirect()\l+ DetMatrixCacheIndirect()\l+ ~DetMatrixCacheIndirect()\l+ DetMatrixCacheIndirect()\l+ operator=()\l+ getMatrixT2L()\l+ getMatrixT2G()\l+ getMatrixL2G()\l+ getMatrixT2GRot()\l+ isBuilt()\l+ getSize()\l+ getIndirectSize()\l+ isMatrixAvailable()\l# setSize()\l# setSize()\l# setMatrixT2L()\l# setMatrixT2G()\l# setMatrixL2G()\l# setMatrixT2GRot()\l# useT2LCache()\l# useT2GCache()\l# useL2GCache()\l# useT2GRotCache()\l}",height=0.2,width=0.4,color="black",URL="$d8/d60/classo2_1_1detectors_1_1DetMatrixCacheIndirect.html",tooltip="Variant of DetMatrixCache for non consecutive indexing. "];
  Node3 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{o2::detectors::DetMatrix\lCache\n|+ mDetID\l+ mSize\l+ mL2G\l+ mT2L\l+ mT2G\l+ mT2GRot\l|+ DetMatrixCache()\l+ DetMatrixCache()\l+ ~DetMatrixCache()\l+ DetMatrixCache()\l+ operator=()\l+ getDetID()\l+ getName()\l+ getCacheT2L()\l+ getCacheT2G()\l+ getCacheL2G()\l+ getCacheT2GRot()\l+ getMatrixT2L()\l+ getMatrixT2G()\l+ getMatrixL2G()\l+ getMatrixT2GRot()\l+ isBuilt()\l+ getSize()\l+ fillMatrixCache()\l+ setSize()\l+ getCacheT2L()\l+ getCacheT2G()\l+ getCacheL2G()\l+ getCacheT2GRot()\l+ ClassDef()\l}",height=0.2,width=0.4,color="black",URL="$df/d06/classo2_1_1detectors_1_1DetMatrixCache.html"];
}
