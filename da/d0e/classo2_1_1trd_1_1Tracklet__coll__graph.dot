digraph "o2::trd::Tracklet"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{o2::trd::Tracklet\n||+ Tracklet()\l+ Tracklet()\l+ Tracklet()\l+ Tracklet()\l+ ~Tracklet()\l+ operator=()\l+ getdZdX()\l+ localToGlobal()\l+ print()\l+ getYbin()\l+ getdY()\l+ getZbin()\l+ getPID()\l+ getMCM()\l+ getROB()\l+ getLabel()\l+ getLabel()\l+ getLabels()\l+ hasLabel()\l+ cookPID()\l+ getPID()\l+ getDetector()\l+ getHCId()\l+ getdYdX()\l+ getX()\l+ getY()\l+ getZ()\l+ getLocalZ()\l+ getQ0()\l+ getQ1()\l+ getNHits()\l+ getNHits0()\l+ getNHits1()\l+ getTrackletWord()\l+ setTrackletWord()\l+ setDetector()\l+ setHCId()\l+ setMCM()\l+ setROB()\l+ setLabel()\l+ setQ0()\l+ setQ1()\l+ setNHits()\l+ setNHits0()\l+ setNHits1()\l+ setSlope()\l+ setOffset()\l+ setError()\l+ setClusters()\l+ getSlope()\l+ getOffset()\l+ getError()\l+ getNClusters()\l+ getResiduals()\l+ getClsCharges()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #mError\n#mOffset\n#mSlope" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{float\n||}",height=0.2,width=0.4,color="black",URL="$d4/dc3/classfloat.html"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #mLabel" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{array\< int, 3 \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #mNHits\n#mQ0\n#mQ1\n#mHCId\n#mNClusters\n#mNHits0\n#mROB\n#mNHits1\n#mMCM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{int\n||}",height=0.2,width=0.4,color="grey75"];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #mGeo" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{o2::trd::TRDGeometry\n||+ ~TRDGeometry()\l+ TRDGeometry()\l+ createGeometry()\l+ addAlignableVolumes()\l+ createClusterMatrixArray()\l+ createPadPlaneArray()\l+ rotateBack()\l+ chamberInGeometry()\l+ getSensitiveTRDVolumes()\l+ instance()\l# fillMatrixCache()\l}",height=0.2,width=0.4,color="black",URL="$d9/d9c/classo2_1_1trd_1_1TRDGeometry.html"];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{o2::trd::TRDGeometryBase\n|+ st\l+ y\l+ z\l+ eps\l+ row\l+ MAXMATRICES\l# TLENGTH\l# SHEIGHT\l# SWIDTH1\l# SWIDTH2\l# SLENGTH\l# FLENGTH\l# SMPLTT\l# VSPACE\l# CRAH\l# CDRH\l# CAMH\l# CROH\l# CROW\l# CH\l# CHSV\l# ANODEPOS\l# CALT\l# CCLST\l# CCLFT\l# CGLT\l# CCUTA\l# CCUTB\l# CAUT\l# CALW\l# CALH\l# CALWMOD\l# CALHMOD\l# CWSW\l# CWSH\l# DRTHICK\l# AMTHICK\l# XETHICK\l# WRTHICK\l# RMYTHICK\l# RCBTHICK\l# RFBTHICK\l# PPPTHICK\l# PCBTHICK\l# PPCTHICK\l# PRBTHICK\l# PELTHICK\l# PHCTHICK\l# DRZPOS\l# AMZPOS\l# WRZPOSA\l# WRZPOSB\l# CALZPOS\l# ROBMAXC0\l# ROBMAXC1\l# TBMAX\l# TIME0BASE\l# TIME0\l# XTRDBEG\l# XTRDEND\l# CLENGTH\l|+ ~TRDGeometryBase()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ getSector()\l+ getTime0()\l+ getXtrdBeg()\l+ getXtrdEnd()\l+ getChamberWidth()\l+ getChamberLength()\l+ getAlpha()\l+ cheight()\l+ cheightSV()\l+ cspace()\l+ craHght()\l+ cdrHght()\l+ camHght()\l+ croHght()\l+ csvHght()\l+ croWid()\l+ anodePos()\l+ myThick()\l+ drThick()\l+ amThick()\l+ drZpos()\l+ rpadW()\l+ cpadW()\l+ cwidcha()\l+ MCMmax()\l+ MCMrow()\l+ ROBmaxC0()\l+ ROBmaxC1()\l+ ADCmax()\l+ TBmax()\l+ padmax()\l+ colmax()\l+ rowmaxC0()\l+ rowmaxC1()\l# TRDGeometryBase()\l# ClassDefNV()\l}",height=0.2,width=0.4,color="black",URL="$d6/dbe/classo2_1_1trd_1_1TRDGeometryBase.html"];
  Node2 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #RPADW\n#VROCSM\n#PGLTHICK\n#CPADW\n#PPDTHICK\n#RRHTHICK\n#RGLTHICK\n#CSVH\n#HSPACE\n#CWIDTH\n..." ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #mPadPlanes" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{o2::trd::TRDPadPlane\n|# mLength\l# mLengthRim\l# mLengthOPad\l# mWidthOPad\l# mTiltingAngle\l# mPadRowSMOffset\l# mAnodeWireOffset\l|+ TRDPadPlane()\l+ TRDPadPlane()\l+ TRDPadPlane()\l+ operator=()\l+ ~TRDPadPlane()\l+ setLayer()\l+ setStack()\l+ setRowSpacing()\l+ setColSpacing()\l+ setLengthRim()\l+ setWidthRim()\l+ setNcols()\l+ setNrows()\l+ setPadCol()\l+ setPadRow()\l+ setLength()\l+ setWidth()\l+ setLengthOPad()\l+ setWidthOPad()\l+ setLengthIPad()\l+ setWidthIPad()\l+ setPadRowSMOffset()\l+ setAnodeWireOffset()\l+ setTiltingAngle()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l}",height=0.2,width=0.4,color="black",URL="$da/dc0/classo2_1_1trd_1_1TRDPadPlane.html"];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" #mPadRow\n#mWidth\n#mTiltingTan\n#mWidthIPad\n#mPadCol\n+const\n#mLengthIPad\n#mWidthRim\n#mRowSpacing\n#mColSpacing\n..." ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{double\n||}",height=0.2,width=0.4,color="grey75"];
  Node9 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +mPadCol" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{else return rphi\n||}",height=0.2,width=0.4,color="grey75"];
  Node4 -> Node7 [color="grey25",fontsize="10",style="solid",label=" #mNrows\n#mLayer\n#MAXROWS\n#mNcols\n#MAXCOLS\n#mStack" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +z" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{else return mPadRow\l [row] mPadRowSMOffset\n||}",height=0.2,width=0.4,color="grey75"];
  Node11 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +z" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{else return mPadRow\l [row]\n||}",height=0.2,width=0.4,color="grey75"];
  Node4 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #MCMMAX\n#MCMROW\n#PADMAX\n+const\n#mSMStatus\n#COLMAX\n#ADCMAX\n#ROWMAXC0\n#ROWMAXC1\n+stack\n..." ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +status" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{bool\n||}",height=0.2,width=0.4,color="grey75"];
  Node13 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{o2::detectors::DetMatrix\lCacheIndirect\n||+ DetMatrixCacheIndirect()\l+ DetMatrixCacheIndirect()\l+ ~DetMatrixCacheIndirect()\l+ DetMatrixCacheIndirect()\l+ operator=()\l+ getMatrixT2L()\l+ getMatrixT2G()\l+ getMatrixL2G()\l+ getMatrixT2GRot()\l+ isBuilt()\l+ getSize()\l+ getIndirectSize()\l+ isMatrixAvailable()\l# setSize()\l# setSize()\l# setMatrixT2L()\l# setMatrixT2G()\l# setMatrixL2G()\l# setMatrixT2GRot()\l# useT2LCache()\l# useT2GCache()\l# useL2GCache()\l# useT2GRotCache()\l}",height=0.2,width=0.4,color="black",URL="$d8/d60/classo2_1_1detectors_1_1DetMatrixCacheIndirect.html",tooltip="Variant of DetMatrixCache for non consecutive indexing. "];
  Node14 -> Node13 [dir="back",color="firebrick4",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{o2::detectors::DetMatrix\lCache\n||+ DetMatrixCache()\l+ DetMatrixCache()\l+ ~DetMatrixCache()\l+ DetMatrixCache()\l+ operator=()\l+ getDetID()\l+ getName()\l+ getCacheT2L()\l+ getCacheT2G()\l+ getCacheL2G()\l+ getCacheT2GRot()\l+ getMatrixT2L()\l+ getMatrixT2G()\l+ getMatrixL2G()\l+ getMatrixT2GRot()\l+ isBuilt()\l+ getSize()\l+ fillMatrixCache()\l+ setSize()\l+ getCacheT2L()\l+ getCacheT2G()\l+ getCacheL2G()\l+ getCacheT2GRot()\l+ ClassDef()\l}",height=0.2,width=0.4,color="black",URL="$df/d06/classo2_1_1detectors_1_1DetMatrixCache.html"];
  Node15 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +mDetID" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{o2::detectors::DetID\n|+ ITS\l+ TOF\l+ PHS\l+ CPV\l+ EMC\l+ HMP\l+ MFT\l+ MID\l+ Last\l|+ DetID()\l+ DetID()\l+ DetID()\l+ operator=()\l+ getID()\l+ getMask()\l+ getName()\l+ operator int()\l+ DetID()\l+ getNDetectors()\l+ getName()\l+ getMask()\l}",height=0.2,width=0.4,color="black",URL="$d6/dd5/classo2_1_1detectors_1_1DetID.html",tooltip="Static class with identifiers, bitmasks and names for ALICE detectors. "];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" +ACO\n+First\n+MCH\n+FV0\n+FT0\n+FDD\n+TRD\n+nDetectors\n+TPC\n+ZDC\n..." ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{static\n||}",height=0.2,width=0.4,color="grey75"];
  Node17 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +mT2G\n+mT2L\n+mL2G" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{o2::detectors::MatrixCache\l\< o2::Transform3D \>\n||+ MatrixCache()\l+ MatrixCache()\l+ ~MatrixCache()\l+ operator=()\l+ setSize()\l+ getSize()\l+ setMatrix()\l+ getMatrix()\l+ isFilled()\l}",height=0.2,width=0.4,color="black",URL="$d4/daa/classo2_1_1detectors_1_1MatrixCache.html"];
  Node18 -> Node17 [dir="back",color="orange",fontsize="10",style="solid",label=" \< o2::Transform3D \>" ,fontname="Helvetica"];
  Node18 [label="{o2::detectors::MatrixCache\< T \>\n||+ MatrixCache()\l+ ~MatrixCache()\l+ MatrixCache()\l+ operator=()\l+ setSize()\l+ getSize()\l+ setMatrix()\l+ getMatrix()\l+ isFilled()\l}",height=0.2,width=0.4,color="black",URL="$d4/daa/classo2_1_1detectors_1_1MatrixCache.html",tooltip="MatrixCache is a vector of cached transform matrices (per sensor) for specific Transformation type..."];
  Node4 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +mSize" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +mT2GRot" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{o2::detectors::MatrixCache\l\< o2::Rotation2D \>\n||+ MatrixCache()\l+ MatrixCache()\l+ ~MatrixCache()\l+ operator=()\l+ setSize()\l+ getSize()\l+ setMatrix()\l+ getMatrix()\l+ isFilled()\l}",height=0.2,width=0.4,color="black",URL="$d4/daa/classo2_1_1detectors_1_1MatrixCache.html"];
  Node18 -> Node19 [dir="back",color="orange",fontsize="10",style="solid",label=" \< o2::Rotation2D \>" ,fontname="Helvetica"];
  Node20 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #mClsCharges\n#mResiduals" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{vector\< float \>\n||}",height=0.2,width=0.4,color="grey75"];
  Node21 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #mTrackletWord" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{unsigned\n||}",height=0.2,width=0.4,color="grey75"];
}
