digraph "GPUCA_NAMESPACE::gpu::FlatObject"
{
 // INTERACTIVE_SVG=YES
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{GPUCA_NAMESPACE::gpu\l::FlatObject\n|# mFlatBufferSize\l# mConstructionMask\l# mFlatBufferContainer\l# mFlatBufferPtr\l|+ FlatObject()\l+ ~FlatObject()\l+ FlatObject()\l+ operator=()\l+ destroy()\l+ getFlatBufferSize()\l+ getFlatBufferPtr()\l+ isConstructed()\l+ isBufferInternal()\l+ adoptInternalBuffer()\l+ clearInternalBufferPtr()\l+ printC()\l+ alignSize()\l+ relocatePointer()\l+ writeToFile()\l+ readFromFile()\l+ stressTest()\l# startConstruction()\l# finishConstruction()\l# cloneFromObject()\l# releaseInternalBuffer()\l# moveBufferTo()\l# setActualBufferAddress()\l# setFutureBufferAddress()\l# ClassDefNV()\l# getClassAlignmentBytes()\l# getBufferAlignmentBytes()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{GPUCA_NAMESPACE::gpu\l::IrregularSpline1D\n|+ const\l+ u1\l+ u2\l+ u3\l+ c0\l+ c1\l+ c2\l+ c3\l|+ IrregularSpline1D()\l+ IrregularSpline1D()\l+ operator=()\l+ ~IrregularSpline1D()\l+ cloneFromObject()\l+ destroy()\l+ construct()\l+ constructRegular()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ getNumberOfAxisBins()\l+ GPUd()\l+ print()\l+ getBufferAlignmentBytes()\l+ getDataAlignmentBytes()\l}",height=0.2,width=0.4,color="black",URL="$de/d7d/classGPUCA__NAMESPACE_1_1gpu_1_1IrregularSpline1D.html"];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{GPUCA_NAMESPACE::gpu\l::IrregularSpline2D3D\n|+ u\l+ v\l+ x\l+ y\l+ const\l+ u\l+ const\l|+ IrregularSpline2D3D()\l+ IrregularSpline2D3D()\l+ operator=()\l+ ~IrregularSpline2D3D()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ construct()\l+ constructRegular()\l+ GPUd()\l+ GPUd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ getFlatBufferSize()\l+ getFlatBufferPtr()\l+ getGridUOffset()\l+ getGridVOffset()\l+ print()\l+ getClassAlignmentBytes()\l+ getBufferAlignmentBytes()\l+ getDataAlignmentBytes()\l}",height=0.2,width=0.4,color="black",URL="$d5/d77/classGPUCA__NAMESPACE_1_1gpu_1_1IrregularSpline2D3D.html"];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{GPUCA_NAMESPACE::gpu\l::SemiregularSpline2D3D\n||+ SemiregularSpline2D3D()\l+ SemiregularSpline2D3D()\l+ operator=()\l+ ~SemiregularSpline2D3D()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ construct()\l+ correctEdges()\l+ getSpline()\l+ getSplineVec()\l+ getNumberOfKnots()\l+ getNumberOfRows()\l+ getGridV()\l+ getGridU()\l+ getKnotUV()\l+ getFlatBufferSize()\l+ getDataIndex()\l+ getDataIndex0()\l+ getDataIndexMapOffset()\l+ getFlatBufferPtr()\l+ getSplineArray()\l+ getDataIndexMap()\l+ getClassAlignmentBytes()\l+ getBufferAlignmentBytes()\l+ getDataAlignmentBytes()\l}",height=0.2,width=0.4,color="black",URL="$d2/def/classGPUCA__NAMESPACE_1_1gpu_1_1SemiregularSpline2D3D.html"];
  Node0 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{GPUCA_NAMESPACE::gpu\l::Spline1D\< DataT \>\n|+ knotL\l+ u\l+ u\l|+ GPUhd()\l+ Spline1D()\l+ Spline1D()\l+ Spline1D()\l+ operator=()\l+ ~Spline1D()\l+ recreate()\l+ recreate()\l+ approximateFunction()\l+ GPUhd()\l+ GPUgeneric()\l+ GPUhd()\l+ writeToFile()\l+ GPUhd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUhd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUhd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ setXrange()\l+ print()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ readFromFile()\l+ getParameterAlignmentBytes()\l+ test()\l}",height=0.2,width=0.4,color="black",URL="$d0/d36/classGPUCA__NAMESPACE_1_1gpu_1_1Spline1D.html"];
  Node4 -> Node5 [dir="back",color="orange",fontsize="10",style="solid",label=" \< float \>" ,fontname="Helvetica"];
  Node5 [label="{GPUCA_NAMESPACE::gpu\l::Spline1D\< float \>\n|+ knotL\l+ u\l+ u\l|+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ Spline1D()\l+ Spline1D()\l+ Spline1D()\l+ operator=()\l+ ~Spline1D()\l+ recreate()\l+ recreate()\l+ approximateFunction()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ writeToFile()\l+ setXrange()\l+ print()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ readFromFile()\l+ getParameterAlignmentBytes()\l+ test()\l}",height=0.2,width=0.4,color="black",URL="$d0/d36/classGPUCA__NAMESPACE_1_1gpu_1_1Spline1D.html"];
  Node0 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{GPUCA_NAMESPACE::gpu\l::Spline2DBase\< DataT,\l isConsistentT \>\n|+ u1\l+ const\l+ const\l+ x1Max\l+ x2Min\l+ x2Max\l# mGridU1\l# mGridU2\l# mFparameters\l|+ GPUhd()\l+ Spline2DBase()\l+ Spline2DBase()\l+ operator=()\l+ ~Spline2DBase()\l+ recreate()\l+ recreate()\l+ approximateFunction()\l+ writeToFile()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ print()\l+ cloneFromObject()\l+ moveBufferTo()\l+ destroy()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ readFromFile()\l+ test()\l# ClassDefNV()\l}",height=0.2,width=0.4,color="black",URL="$df/d20/classGPUCA__NAMESPACE_1_1gpu_1_1Spline2DBase.html",tooltip="Base class to store data members and non-inline methods. "];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{GPUCA_NAMESPACE::gpu\l::Spline2D\< DataT, isConsistentT \>\n|+ x2\l+ const\l+ u1\l+ u2\l|+ Spline2D()\l+ Spline2D()\l+ Spline2D()\l+ operator=()\l+ ~Spline2D()\l+ GPUhd()\l+ GPUgeneric()\l+ GPUhd()\l+ GPUhd()\l+ GPUgeneric()\l+ GPUhd()\l+ GPUgeneric()\l+ GPUhd()\l+ GPUgeneric()\l+ GPUhd()\l+ readFromFile()\l}",height=0.2,width=0.4,color="black",URL="$d3/dc3/classGPUCA__NAMESPACE_1_1gpu_1_1Spline2D.html"];
  Node7 -> Node8 [dir="back",color="orange",fontsize="10",style="solid",label=" \< float, 1, 1 \>" ,fontname="Helvetica"];
  Node8 [label="{GPUCA_NAMESPACE::gpu\l::Spline2D\< float, 1, 1 \>\n|+ x2\l+ const\l+ u1\l+ u2\l|+ Spline2D()\l+ Spline2D()\l+ Spline2D()\l+ operator=()\l+ ~Spline2D()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ GPUgeneric()\l+ readFromFile()\l}",height=0.2,width=0.4,color="black",URL="$d3/dc3/classGPUCA__NAMESPACE_1_1gpu_1_1Spline2D.html"];
  Node6 -> Node9 [dir="back",color="orange",fontsize="10",style="solid",label=" \< float, isConsistentT \>" ,fontname="Helvetica"];
  Node9 [label="{GPUCA_NAMESPACE::gpu\l::Spline2DBase\< float,\l isConsistentT \>\n|+ u1\l+ const\l+ const\l+ x1Max\l+ x2Min\l+ x2Max\l# mGridU1\l# mGridU2\l# mFparameters\l|+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ GPUhd()\l+ Spline2DBase()\l+ Spline2DBase()\l+ operator=()\l+ ~Spline2DBase()\l+ recreate()\l+ recreate()\l+ approximateFunction()\l+ writeToFile()\l+ print()\l+ cloneFromObject()\l+ moveBufferTo()\l+ destroy()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ readFromFile()\l+ test()\l# ClassDefNV()\l}",height=0.2,width=0.4,color="black",URL="$df/d20/classGPUCA__NAMESPACE_1_1gpu_1_1Spline2DBase.html"];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node0 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{GPUCA_NAMESPACE::gpu\l::TPCdEdxCalibrationSplines\n|+ const\l+ angleZ\l+ const\l|+ TPCdEdxCalibrationSplines()\l+ TPCdEdxCalibrationSplines()\l+ TPCdEdxCalibrationSplines()\l+ operator=()\l+ recreate()\l+ ~TPCdEdxCalibrationSplines()\l+ cloneFromObject()\l+ moveBufferTo()\l+ destroy()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ GPUd()\l+ setSplinesFromFile()\l+ setDefaultSplines()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ writeToFile()\l+ readFromFile()\l}",height=0.2,width=0.4,color="black",URL="$d6/da0/classGPUCA__NAMESPACE_1_1gpu_1_1TPCdEdxCalibrationSplines.html"];
  Node0 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{GPUCA_NAMESPACE::gpu\l::TPCFastSpaceChargeCorrection\n|+ const\l+ row\l+ iSpline\l+ u\l+ v\l+ dx\l+ du\l+ const\l+ corrU\l+ corrV\l+ const\l+ nomU\l+ const\l+ const\l|+ TPCFastSpaceChargeCorrection()\l+ TPCFastSpaceChargeCorrection()\l+ operator=()\l+ ~TPCFastSpaceChargeCorrection()\l+ cloneFromObject()\l+ destroy()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ startConstruction()\l+ setRowScenarioID()\l+ setSplineScenario()\l+ finishConstruction()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUh()\l+ GPUh()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ getTimeStamp()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ print()\l+ GPUh()\l}",height=0.2,width=0.4,color="black",URL="$d6/d2c/classGPUCA__NAMESPACE_1_1gpu_1_1TPCFastSpaceChargeCorrection.html"];
  Node0 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{GPUCA_NAMESPACE::gpu\l::TPCFastTransform\n|+ row\l+ pad\l+ time\l+ x\l+ y\l+ z\l+ vertexTime\l+ const\l+ float\l+ y\l+ z\l+ pad\l+ time\l+ const\l+ const\l+ ny\l+ const\l+ const\l+ u\l+ v\l+ const\l+ u\l+ v\l+ time\l+ const\l+ time\l+ const\l+ z\l+ const\l+ const\l+ zOffset\l+ vertexTime\l+ x\l+ y\l+ z\l+ const\l+ const\l+ const\l|+ TPCFastTransform()\l+ TPCFastTransform()\l+ operator=()\l+ ~TPCFastTransform()\l+ cloneFromObject()\l+ moveBufferTo()\l+ setActualBufferAddress()\l+ setFutureBufferAddress()\l+ startConstruction()\l+ setCalibration()\l+ setTimeStamp()\l+ GPUd()\l+ getCorrection()\l+ finishConstruction()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ setApplyCorrectionOn()\l+ setApplyCorrectionOff()\l+ isCorrectionApplied()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ GPUd()\l+ writeToFile()\l+ print()\l+ getClassAlignmentBytes()\l+ getBufferAlignmentBytes()\l+ loadFromFile()\l}",height=0.2,width=0.4,color="black",URL="$d2/d47/classGPUCA__NAMESPACE_1_1gpu_1_1TPCFastTransform.html"];
  Node0 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node0 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
}
